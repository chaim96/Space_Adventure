// bitmap file 
// (c) Technion IIT, Department of Electrical Engineering 2021 
// generated bythe automatic Python tool 
 
 
 module winBitMapNew (

					input	logic	clk, 
					input	logic	resetN, 
					input logic	[10:0] offsetX,// offset from top left  position 
					input logic	[10:0] offsetY, 
					input	logic	InsideRectangle, //input that the pixel is within a bracket 
 
					output	logic	drawingRequest, //output that the pixel should be dispalyed 
					output	logic	[7:0] RGBout,  //rgb value from the bitmap 
					output	logic	[3:0] HitEdgeCode //one bit per edge 
 ) ; 
 
 
// generating the bitmap 
 

localparam logic [7:0] COLOR_ENCODING = 8'hFF ;// RGB value in the bitmap representing the BITMAP coolor
localparam logic [7:0] TRANSPARENT_ENCODING = 8'h00 ;// RGB value in the bitmap representing a transparent pixel  
logic[0:63][0:127] object_colors = {
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000011000000000000001010100000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000001000000000000000000000010000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000010000000000010011100000000000000011100000000000000000100000000000000000100000000000000000000,
	128'b00000000000000000000001000000000000011000001000001011111000000000000011111000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000010010000000000011100101011110001111100000000000001111100000001011111111111111000000101001000000000000000000,
	128'b00000000000000000000010111000000001011110000011111001111110000000000001111100001000011111111111111000010101100000000000000000000,
	128'b00000000000000000000000111110000000011111001111111100111110000100010000111110000000111111111111111111000101111000100000000000000,
	128'b00000000000000000000000111111000000011111011111111100111111000111000010111110001100111111111111011111100001111110000000000000000,
	128'b00000000000000000000000111111100000111111111111111110111110010111100000111100001110011111111111001111100001111100000000000000000,
	128'b00000000000000000000001001111100010111111111111111100011100100011100000011100001111011111111111000111100001111100000000000000000,
	128'b00000000000000000000000000111100100111111111111111100011100000011100000011110001111001111111111000111110000111100000000000000000,
	128'b00000000000000000000000000011110001111111111111111100011101000001110000001110001111001111011111000011110010111000000000000000000,
	128'b00000000000000000000000001001111001111111111111100011011100000001110000001110001111001110011111000011111000111000000000000000000,
	128'b00000000000000000000000000001111101111111111110000001001100000101110000001111001111001110001111000001111100111000000000000000000,
	128'b00000000000000000000000000000111111111011111100100101101110000001110000000111001101101101001111010001111110011100000000000000000,
	128'b00000000000000000000000000000011111111011111000000001100110000001110000000111001001101100000111010000111111011100000000000000000,
	128'b00000000000000000000000000000001111111011111000000001100111010101111000000011101001111100000111010000111011011100000000000000000,
	128'b00000000000000000000000000000000111110001111100000001100111100001111000000001101000110100000111010000111111111101000000000000000,
	128'b00000000000000000000000000000000011110101111110000011100011100011111000000001111100110100100011000000011101111101000000000000000,
	128'b00000000000000000000000000000000011110000111111111111100001111111110000000000111100011100000011000000011100111101000000000000000,
	128'b00000000000000000000000000000000011110000011111111111000100111111110000000000111100001111110011111110011110011100000000000000000,
	128'b00000000000000000000000000000000001111000000111111111000000011111100000000000011110001111111111111100001110011100000000000000000,
	128'b00000000000000000000000000000000001111000000000111100000001000011001000000000001110000111111110000001001111000000000000000000000,
	128'b00000000000000000000000000000000101111000000100000001000000000000010000000000000110000000111000000000000111000010000000000000000,
	128'b00000000000000000000000000000000000111100000000000000000000000000000000000000000000000110000000000000000000010000000000000000000,
	128'b00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000101000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,
	128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000};

 
 
//////////--------------------------------------------------------------------------------------------------------------= 
//hit bit map has one bit per edge:  hit_colors[3:0] =   {Left, Top, Right, Bottom}	 
//there is one bit per edge, in the corner two bits are set  
 logic [0:3] [0:3] [3:0] hit_colors = 
		   {16'hC446,     
			16'h8C62,    
			16'h8932, 
			16'h9113}; 
 // pipeline (ff) to get the pixel color from the array 	 
//////////--------------------------------------------------------------------------------------------------------------= 
always_ff@(posedge clk or negedge resetN) 
begin 
	if(!resetN) begin 
		RGBout <=	8'h00; 
		HitEdgeCode <= 4'h0; 
	end 
	else begin 
		RGBout <= TRANSPARENT_ENCODING ; // default  
		HitEdgeCode <= 4'h0; 
 
		if (InsideRectangle == 1'b1 ) 
		begin // inside an external bracket  
			HitEdgeCode <= hit_colors[offsetY >> 4][offsetX >> 5 ]; // get hitting edge from the colors table
			RGBout <= (object_colors[offsetY][offsetX] ==  1 ) ? COLOR_ENCODING  : TRANSPARENT_ENCODING; 
		end  	 
		 
	end 
end 
 
//////////--------------------------------------------------------------------------------------------------------------= 
// decide if to draw the pixel or not 
assign drawingRequest = (RGBout != TRANSPARENT_ENCODING ) ? 1'b1 : 1'b0 ; // get optional transparent command from the bitmpap   
 
endmodule 
